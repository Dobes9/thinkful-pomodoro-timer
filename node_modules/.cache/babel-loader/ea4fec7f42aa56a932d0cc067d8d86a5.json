{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\thinkful\\\\qualified-challenges\\\\module-23\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Pomodoro.js\";\nimport React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerDurations from \"./TimerDurations\";\nimport PlayPauseStopButtons from \"./PlayPauseStopButtons\";\nimport SessionDisplay from \"./SessionDisplay\";\n\nfunction Pomodoro() {\n  // Object to hold all initial values for the state\n  const initialTimerSettings = {\n    focusDuration: 25,\n    breakDuration: 5,\n    focusInSeconds: 1500,\n    breakInSeconds: 300,\n    onBreak: false,\n    isTimerRunning: false,\n    activeSession: false\n  };\n  const [timerSettings, setTimerSettings] = useState({ ...initialTimerSettings\n  });\n  const {\n    focusDuration,\n    focusInSeconds,\n    breakDuration,\n    breakInSeconds,\n    isTimerRunning,\n    onBreak\n  } = timerSettings;\n  useInterval(() => {\n    const timerCountdown = !onBreak ? focusInSeconds : breakInSeconds;\n    /* when countdown hits 0, reset both focusInSeconds and breakInSeconds, based on the current value of focusDuration and breakDuration. \n    Additionally, toggle value of onBreak and play audio clip */\n\n    if (timerCountdown === 0) {\n      setTimerSettings({ ...timerSettings,\n        focusInSeconds: focusDuration * 60,\n        breakInSeconds: breakDuration * 60,\n        onBreak: !onBreak\n      });\n      new Audio(`https://www.myinstants.com/media/sounds/tindeck_1.mp3`).play(); // tick down the appropriate timer each second by 1\n    } else if (timerCountdown > 0 && !onBreak) {\n      setTimerSettings({ ...timerSettings,\n        focusInSeconds: focusInSeconds - 1\n      });\n    } else if (timerCountdown > 0 && onBreak) {\n      setTimerSettings({ ...timerSettings,\n        breakInSeconds: breakInSeconds - 1\n      });\n    }\n  }, isTimerRunning ? 1000 : null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TimerDurations, {\n    timerSettings: timerSettings,\n    setTimerSettings: setTimerSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PlayPauseStopButtons, {\n    timerSettings: timerSettings,\n    initialTimerSettings: initialTimerSettings,\n    setTimerSettings: setTimerSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(SessionDisplay, {\n    timerSettings: timerSettings,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["D:/projects/thinkful/qualified-challenges/module-23/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","TimerDurations","PlayPauseStopButtons","SessionDisplay","Pomodoro","initialTimerSettings","focusDuration","breakDuration","focusInSeconds","breakInSeconds","onBreak","isTimerRunning","activeSession","timerSettings","setTimerSettings","timerCountdown","Audio","play"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;;AAEA,SAASC,QAAT,GAAoB;AAClB;AACA,QAAMC,oBAAoB,GAAG;AAC3BC,IAAAA,aAAa,EAAE,EADY;AAE3BC,IAAAA,aAAa,EAAE,CAFY;AAG3BC,IAAAA,cAAc,EAAE,IAHW;AAI3BC,IAAAA,cAAc,EAAE,GAJW;AAK3BC,IAAAA,OAAO,EAAE,KALkB;AAM3BC,IAAAA,cAAc,EAAE,KANW;AAO3BC,IAAAA,aAAa,EAAE;AAPY,GAA7B;AAUA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EACjD,GAAGM;AAD8C,GAAD,CAAlD;AAIA,QAAM;AACJC,IAAAA,aADI;AAEJE,IAAAA,cAFI;AAGJD,IAAAA,aAHI;AAIJE,IAAAA,cAJI;AAKJE,IAAAA,cALI;AAMJD,IAAAA;AANI,MAOFG,aAPJ;AASAb,EAAAA,WAAW,CACT,MAAM;AACJ,UAAMe,cAAc,GAAG,CAACL,OAAD,GACnBF,cADmB,GAEnBC,cAFJ;AAIA;AACN;;AACM,QAAIM,cAAc,KAAK,CAAvB,EAA0B;AACxBD,MAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfL,QAAAA,cAAc,EAAEF,aAAa,GAAG,EAFjB;AAGfG,QAAAA,cAAc,EAAEF,aAAa,GAAG,EAHjB;AAIfG,QAAAA,OAAO,EAAE,CAACA;AAJK,OAAD,CAAhB;AAMA,UAAIM,KAAJ,CACG,uDADH,EAEEC,IAFF,GAPwB,CAWxB;AACD,KAZD,MAYO,IAAIF,cAAc,GAAG,CAAjB,IAAsB,CAACL,OAA3B,EAAoC;AACzCI,MAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfL,QAAAA,cAAc,EAAEA,cAAc,GAAG;AAFlB,OAAD,CAAhB;AAID,KALM,MAKA,IAAIO,cAAc,GAAG,CAAjB,IAAsBL,OAA1B,EAAmC;AACxCI,MAAAA,gBAAgB,CAAC,EACf,GAAGD,aADY;AAEfJ,QAAAA,cAAc,EAAEA,cAAc,GAAG;AAFlB,OAAD,CAAhB;AAID;AACF,GA/BQ,EAgCTE,cAAc,GAAG,IAAH,GAAU,IAhCf,CAAX;AAmCA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,aAAa,EAAEE,aADjB;AAEE,IAAA,gBAAgB,EAAEC,gBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE,oBAAC,oBAAD;AACE,IAAA,aAAa,EAAED,aADjB;AAEE,IAAA,oBAAoB,EAAER,oBAFxB;AAGE,IAAA,gBAAgB,EAAES,gBAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAUE,oBAAC,cAAD;AAAgB,IAAA,aAAa,EAAED,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CADF;AAcD;;AAED,eAAeT,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport useInterval from \"../utils/useInterval\";\nimport TimerDurations from \"./TimerDurations\";\nimport PlayPauseStopButtons from \"./PlayPauseStopButtons\";\nimport SessionDisplay from \"./SessionDisplay\";\n\nfunction Pomodoro() {\n  // Object to hold all initial values for the state\n  const initialTimerSettings = {\n    focusDuration: 25,\n    breakDuration: 5,\n    focusInSeconds: 1500,\n    breakInSeconds: 300,\n    onBreak: false,\n    isTimerRunning: false,\n    activeSession: false,\n  };\n\n  const [timerSettings, setTimerSettings] = useState({\n    ...initialTimerSettings,\n  });\n\n  const {\n    focusDuration,\n    focusInSeconds,\n    breakDuration,\n    breakInSeconds,\n    isTimerRunning,\n    onBreak,\n  } = timerSettings;\n\n  useInterval(\n    () => {\n      const timerCountdown = !onBreak\n        ? focusInSeconds\n        : breakInSeconds;\n\n      /* when countdown hits 0, reset both focusInSeconds and breakInSeconds, based on the current value of focusDuration and breakDuration. \n      Additionally, toggle value of onBreak and play audio clip */\n      if (timerCountdown === 0) {\n        setTimerSettings({\n          ...timerSettings,\n          focusInSeconds: focusDuration * 60,\n          breakInSeconds: breakDuration * 60,\n          onBreak: !onBreak,\n        });\n        new Audio(\n          `https://www.myinstants.com/media/sounds/tindeck_1.mp3`\n        ).play();\n\n        // tick down the appropriate timer each second by 1\n      } else if (timerCountdown > 0 && !onBreak) {\n        setTimerSettings({\n          ...timerSettings,\n          focusInSeconds: focusInSeconds - 1,\n        });\n      } else if (timerCountdown > 0 && onBreak) {\n        setTimerSettings({\n          ...timerSettings,\n          breakInSeconds: breakInSeconds - 1,\n        });\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  return (\n    <div className=\"pomodoro\">\n      <TimerDurations\n        timerSettings={timerSettings}\n        setTimerSettings={setTimerSettings}\n      />\n      <PlayPauseStopButtons\n        timerSettings={timerSettings}\n        initialTimerSettings={initialTimerSettings}\n        setTimerSettings={setTimerSettings}\n      />\n      <SessionDisplay timerSettings={timerSettings} />\n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}