{"ast":null,"code":"var _jsxFileName = \"D:\\\\projects\\\\thinkful\\\\qualified-challenges\\\\module-23\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\SessionDisplay.js\";\nimport React from \"react\";\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\n\nfunction SessionDisplay({\n  timerSettings\n}) {\n  const {\n    isTimerRunning,\n    activeSession,\n    focusDuration,\n    breakDuration,\n    focusInSeconds,\n    breakInSeconds,\n    onBreak\n  } = timerSettings; // valueNow determines the percentage of the session that has been completed, and updates as the timer runs\n\n  const valueNow = !onBreak ? (focusDuration * 60 - focusInSeconds) / (focusDuration * 60) * 100 : (breakDuration * 60 - breakInSeconds) / (breakDuration * 60) * 100;\n  return (// this div only renders if activeSession is true\n    activeSession && /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }, !onBreak ? /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }\n    }, \"Focusing for \", minutesToDuration(focusDuration), \" minutes\") : /*#__PURE__*/React.createElement(\"h2\", {\n      \"data-testid\": \"session-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 15\n      }\n    }, \"On Break for \", minutesToDuration(breakDuration), \" minutes\"), !onBreak ? /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, secondsToDuration(focusInSeconds), \" remaining\") : /*#__PURE__*/React.createElement(\"p\", {\n      className: \"lead\",\n      \"data-testid\": \"session-sub-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, secondsToDuration(breakInSeconds), \" remaining\"), isTimerRunning ? null : /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 38\n      }\n    }, \"PAUSED\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row mb-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress\",\n      style: {\n        height: \"20px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"progress-bar\",\n      role: \"progressbar\",\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      \"aria-valuenow\": valueNow,\n      style: {\n        width: `${valueNow}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }\n    })))))\n  );\n}\n\nexport default SessionDisplay;","map":{"version":3,"sources":["D:/projects/thinkful/qualified-challenges/module-23/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/SessionDisplay.js"],"names":["React","secondsToDuration","minutesToDuration","SessionDisplay","timerSettings","isTimerRunning","activeSession","focusDuration","breakDuration","focusInSeconds","breakInSeconds","onBreak","valueNow","height","width"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,iBAA5B,QAAqD,mBAArD;;AAEA,SAASC,cAAT,CAAwB;AAAEC,EAAAA;AAAF,CAAxB,EAA2C;AACzC,QAAM;AACJC,IAAAA,cADI;AAEJC,IAAAA,aAFI;AAGJC,IAAAA,aAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,cALI;AAMJC,IAAAA,cANI;AAOJC,IAAAA;AAPI,MAQFP,aARJ,CADyC,CAUzC;;AACA,QAAMQ,QAAQ,GAAG,CAACD,OAAD,GACZ,CAACJ,aAAa,GAAG,EAAhB,GAAqBE,cAAtB,KAAyCF,aAAa,GAAG,EAAzD,CAAD,GAAiE,GADpD,GAEZ,CAACC,aAAa,GAAG,EAAhB,GAAqBE,cAAtB,KAAyCF,aAAa,GAAG,EAAzD,CAAD,GAAiE,GAFrE;AAGA,SACE;AACAF,IAAAA,aAAa,iBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACK,OAAD,gBACC;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgBT,iBAAiB,CAACK,aAAD,CADjC,aADD,gBAKC;AAAI,qBAAY,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACgBL,iBAAiB,CAACM,aAAD,CADjC,aANJ,EAUG,CAACG,OAAD,gBACC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGV,iBAAiB,CAACQ,cAAD,CADpB,eADD,gBAKC;AAAG,MAAA,SAAS,EAAC,MAAb;AAAoB,qBAAY,mBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGR,iBAAiB,CAACS,cAAD,CADpB,eAfJ,EAoBGL,cAAc,GAAG,IAAH,gBAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBApB3B,CADF,CADF,eAyBE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAE;AAAEQ,QAAAA,MAAM,EAAE;AAAV,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,IAAI,EAAC,aAFP;AAGE,uBAAc,GAHhB;AAIE,uBAAc,KAJhB;AAKE,uBAAeD,QALjB;AAME,MAAA,KAAK,EAAE;AAAEE,QAAAA,KAAK,EAAG,GAAEF,QAAS;AAArB,OANT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CADF,CAzBF;AAHJ;AA6CD;;AAED,eAAeT,cAAf","sourcesContent":["import React from \"react\";\r\nimport { secondsToDuration, minutesToDuration } from \"../utils/duration\";\r\n\r\nfunction SessionDisplay({ timerSettings }) {\r\n  const {\r\n    isTimerRunning,\r\n    activeSession,\r\n    focusDuration,\r\n    breakDuration,\r\n    focusInSeconds,\r\n    breakInSeconds,\r\n    onBreak,\r\n  } = timerSettings;\r\n  // valueNow determines the percentage of the session that has been completed, and updates as the timer runs\r\n  const valueNow = !onBreak\r\n    ? ((focusDuration * 60 - focusInSeconds) / (focusDuration * 60)) * 100\r\n    : ((breakDuration * 60 - breakInSeconds) / (breakDuration * 60)) * 100;\r\n  return (\r\n    // this div only renders if activeSession is true\r\n    activeSession && (\r\n      <div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            {!onBreak ? (\r\n              <h2 data-testid=\"session-title\">\r\n                Focusing for {minutesToDuration(focusDuration)} minutes\r\n              </h2>\r\n            ) : (\r\n              <h2 data-testid=\"session-title\">\r\n                On Break for {minutesToDuration(breakDuration)} minutes\r\n              </h2>\r\n            )}\r\n            {!onBreak ? (\r\n              <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                {secondsToDuration(focusInSeconds)} remaining\r\n              </p>\r\n            ) : (\r\n              <p className=\"lead\" data-testid=\"session-sub-title\">\r\n                {secondsToDuration(breakInSeconds)} remaining\r\n              </p>\r\n            )}\r\n            {/* PAUSED only displays when the timer is paused */}\r\n            {isTimerRunning ? null : <h2>PAUSED</h2>}\r\n          </div>\r\n        </div>\r\n        <div className=\"row mb-2\">\r\n          <div className=\"col\">\r\n            <div className=\"progress\" style={{ height: \"20px\" }}>\r\n              <div\r\n                className=\"progress-bar\"\r\n                role=\"progressbar\"\r\n                aria-valuemin=\"0\"\r\n                aria-valuemax=\"100\"\r\n                aria-valuenow={valueNow}\r\n                style={{ width: `${valueNow}%` }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default SessionDisplay;\r\n"]},"metadata":{},"sourceType":"module"}